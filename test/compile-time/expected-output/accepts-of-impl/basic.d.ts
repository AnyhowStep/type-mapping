import * as tm from "../../../../dist";
import { AcceptsOfImpl } from "../../../../dist/accepts-of-impl";
declare type mixed_0 = tm.TypeMapDelegate<any, never>;
declare type mixed_1 = tm.TypeMapDelegate<unknown, never>;
declare type mixed_2 = tm.TypeMapDelegate<string, never>;
declare type mixed_3 = tm.TypeMapDelegate<number, never>;
declare type mixed_4 = tm.TypeMapDelegate<boolean, never>;
declare type mixed_5 = tm.TypeMapDelegate<string | number, never>;
declare type mixed_6 = tm.TypeMapDelegate<string | boolean, never>;
export declare const test_0: AcceptsOfImpl<mixed_0>;
export declare const test_1: AcceptsOfImpl<mixed_1>;
export declare const test_2: AcceptsOfImpl<mixed_2>;
export declare const test_3: AcceptsOfImpl<mixed_3>;
export declare const test_4: AcceptsOfImpl<mixed_4>;
export declare const test_5: AcceptsOfImpl<mixed_5>;
export declare const test_6: AcceptsOfImpl<mixed_6>;
export declare const test_7: AcceptsOfImpl<tm.TypeMapDelegate<unknown, never> & tm.Accepts<string>>;
export declare const test_8: AcceptsOfImpl<tm.TypeMapDelegate<unknown, never> & tm.Accepts<string | number>>;
export declare const test_9: AcceptsOfImpl<tm.TypeMapDelegate<unknown, never> & tm.Accepts<string> & tm.CanAccept<number>>;
export declare const test_10: AcceptsOfImpl<tm.TypeMapDelegate<unknown, never> & tm.Accepts<string | number> & tm.CanAccept<boolean>>;
export declare const test_11: AcceptsOfImpl<tm.TypeMapDelegate<unknown, never> & tm.CanAccept<number>>;
export declare const test_12: AcceptsOfImpl<tm.TypeMapDelegate<unknown, never> & tm.CanAccept<boolean | string>>;
export declare const test_7b: AcceptsOfImpl<tm.TypeMapDelegate<any, never> & tm.Accepts<string>>;
export declare const test_8b: AcceptsOfImpl<tm.TypeMapDelegate<any, never> & tm.Accepts<string | number>>;
export declare const test_9b: AcceptsOfImpl<tm.TypeMapDelegate<any, never> & tm.Accepts<string> & tm.CanAccept<number>>;
export declare const test_10b: AcceptsOfImpl<tm.TypeMapDelegate<any, never> & tm.Accepts<string | number> & tm.CanAccept<boolean>>;
export declare const test_11b: AcceptsOfImpl<tm.TypeMapDelegate<any, never> & tm.CanAccept<number>>;
export declare const test_12b: AcceptsOfImpl<tm.TypeMapDelegate<any, never> & tm.CanAccept<boolean | string>>;
export declare const test_7c: AcceptsOfImpl<tm.TypeMapDelegate<Date, never> & tm.Accepts<string>>;
export declare const test_8c: AcceptsOfImpl<tm.TypeMapDelegate<Date, never> & tm.Accepts<string | number>>;
export declare const test_9c: AcceptsOfImpl<tm.TypeMapDelegate<Date, never> & tm.Accepts<string> & tm.CanAccept<number>>;
export declare const test_10c: AcceptsOfImpl<tm.TypeMapDelegate<Date, never> & tm.Accepts<string | number> & tm.CanAccept<boolean>>;
export declare const test_11c: AcceptsOfImpl<tm.TypeMapDelegate<Date, never> & tm.CanAccept<number>>;
export declare const test_12c: AcceptsOfImpl<tm.TypeMapDelegate<Date, never> & tm.CanAccept<boolean | string>>;
export {};
